// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  secondaryEmail String?
  // incase youtuber verified email !== one used to sign up
  // doenst matter for talent as they only use email signed w/
  name           String?
  picture        String?
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  postedJobs   Job[]         @relation("PostedJobs")
  applications Application[] @relation("Applications")

  youtuberProfile YoutuberProfile?
  talentProfile   TalentProfile?
}

model YoutuberProfile {
  id              String   @id @default(cuid())
  channelName     String
  youtubeUsername String   @unique
  about           String?
  subscribers     Int?
  views           Int?
  videos          Int?
  youtuberSince   DateTime
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TalentProfile {
  id           String       @id @default(cuid())
  about        String?
  rate         Int
  workLocation WorkLocation
  workType     WorkType
  topSkill     String
  skills       String[]
  location     String
  experience   String?
  languages    String[]
  categories   String[]
  clients      String[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String       @id @default(cuid())
  title        String
  description  String
  salary       String
  workLocation WorkLocation
  workType     WorkType
  status       JobStatus    @default(OPEN)
  categories   String[]

  posterId     String
  poster       User          @relation("PostedJobs", fields: [posterId], references: [id], onDelete: Cascade)
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Application {
  id          String            @id @default(cuid())
  coverLetter String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  applicantId String
  applicant   User   @relation("Applications", fields: [applicantId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum WorkLocation {
  REMOTE
  ONSITE
  HYBRID
}

enum WorkType {
  FULL_TIME
  PART_TIME
  PROJECT_BASED
}

enum Role {
  YOUTUBER
  TALENT
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
  EXPIRED
}

enum ApplicationStatus {
  DRAFT
  PENDING
  REJECTED
  ACCEPTED
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
